Log, Field Name, Type, UDM Field, Type, Description
, , , metadata_vendor_name, , replace with 'Corelight'
, , , metadate_event_type, , replace with 'GENRIC_EVENT'
, _path, , metadata_product_event_type
, _system_name, , observer_hostname
, uid, string, metadata_product_log_id, , A unique identifier of the connection.
, fuid, string, metadata_product_log_id, , An identifier associated with a single file.
, id.orig_h, string, principal_ip, , The originator's IP address.
, id.orig_p, integer, principal_port, , The originator's port number.
, id.resp_h, string, target_ip, , The responder's IP address.
, id.resp_p, integer, target_port, , The responder's port number.
conn, , , metadata_event_type, , replace with 'NETWORK_CONNECTION'
conn, , , metadata_product_name, , replace with 'Zeek'
conn, ts, time, , , This is the time of the first packet.
conn, uid, string, metadata_product_log_id, , A unique identifier of the connection.
conn, id.orig_h, string, principal_ip, , The originator's IP address.
conn, id.orig_p, integer, principal_port, , The originator's port number.
conn, id.resp_h, string, target_ip, , The responder's IP address.
conn, id.resp_p, integer, target_port, , The responder's port number.
conn, proto, string, network_ip_protocol, , The transport layer protocol of the connection.
conn, service, string, network_application_protocol, , An identification of an application protocol being sent over the connection.
conn, duration, number, , , How long the connection lasted.  For 3-way or 4-way connection tear-downs - this will not include the final ACK.
conn, orig_bytes, integer, network_sent_bytes, uinteger, The number of payload bytes the originator sent. For TCP this is taken from sequence numbers and might be inaccurate (e.g. due to large connections).
conn, resp_bytes, integer, network_received_bytes, uinteger, The number of payload bytes the responder sent. See *orig_bytes*.
conn, conn_state, string, metadata_description, , The state of the connection.
conn, local_orig, boolean, , , If the connection is originated locally - this value will be T. If it was originated remotely it will be F.  In the case that the `Site::local_nets` variable is undefined - this field will be left empty at all times.
conn, local_resp, boolean, , , If the connection is responded to locally - this value will be T. If it was responded to remotely it will be F.  In the case that the `Site::local_nets` variable is undefined - this field will be left empty at all times.
conn, missed_bytes, integer, , , Indicates the number of bytes missed in content gaps - which is representative of packet loss.  A value other than zero will normally cause protocol analysis to fail but some analysis may have been completed prior to the packet loss.
conn, history, string, , , Records the state history of connections as a string of letters.  The meaning of those letters is:
conn, orig_pkts, integer, , , Number of packets that the originator sent. Only set if `use_conn_size_analyzer` = T.
conn, orig_ip_bytes, integer, , , Number of IP level bytes that the originator sent (as seen on the wire - taken from the IP total_length header field). Only set if `use_conn_size_analyzer` = T.
conn, resp_pkts, integer, , , Number of packets that the responder sent. Only set if `use_conn_size_analyzer` = T.
conn, resp_ip_bytes, integer, , , Number of IP level bytes that the responder sent (as seen on the wire - taken from the IP total_length header field). Only set if `use_conn_size_analyzer` = T.
conn, tunnel_parents, array[string], , , If this connection was over a tunnel - indicate the *uid* values for any encapsulating parent connections used over the lifetime of this inner connection.
conn, orig_cc, string, , , The name of the node where this connection was analyzed. Country code for GeoIP lookup of the originating IP address.
conn, resp_cc, string, , , Country code for GeoIP lookup of the responding IP address.
conn, suri_ids, array[string], , , The suri_ids information.
conn, spcap.url, string, , , The spcap.url information.
conn, spcap.rule, integer, , , The spcap.rule information.
conn, spcap.trigger, string, , , The spcap.trigger information.
conn, app, array[string], , , The app information.
conn, corelight_shunted, boolean, , , The corelight_shunted information.
conn, orig_shunted_pkts, integer, , , The orig_shunted_pkts information.
conn, orig_shunted_bytes, integer, , , The orig_shunted_bytes information.
conn, resp_shunted_pkts, integer, , , The resp_shunted_pkts information.
conn, resp_shunted_bytes, integer, , , The resp_shunted_bytes information.
conn, orig_l2_addr, string, , , Link-layer address of the originator (if available).
conn, resp_l2_addr, string, , , Link-layer address of the responder (if available).
conn, id_orig_h_n.src, string, , , How we determined the name/address pair. Either ``DNS_A`` representing the DNS_A* family of query types - or ``DNS_PTR`` for reverse DNS lookups.
conn, id_orig_h_n.vals, array[string], , , The set of names we observed for a given address.
conn, id_resp_h_n.src, string, , , How we determined the name/address pair. Either ``DNS_A`` representing the DNS_A* family of query types - or ``DNS_PTR`` for reverse DNS lookups.
conn, id_resp_h_n.vals, array[string], , , The set of names we observed for a given address.
conn, vlan, integer, , , The outer VLAN for this connection (if applicable).
conn, inner_vlan, integer, , , The inner VLAN for this connection (if applicable).
conn, community_id, string, event1.idm.read_only_udm.network.community_id, , The community_id information.

conn_red, , , metadata_event_type, , replace with 'NETWORK_CONNECTION'
conn_red, , , metadata_product_name, , replace with 'Zeek'
conn_red, ts, time, , , This is the time of the first packet.
conn_red, uid, string, metadata_product_log_id, , A unique identifier of the connection.
conn_red, id.orig_h, string, principal_ip, , The originator's IP address.
conn_red, id.orig_p, integer, principal_port, , The originator's port number.
conn_red, id.resp_h, string, target_ip, , The responder's IP address.
conn_red, id.resp_p, integer, target_port, , The responder's port number.
conn_red, proto, string, network_ip_protocol, , The transport layer protocol of the connection.
conn_red, service, string, network_application_protocol, , An identification of an application protocol being sent over the connection.
conn_red, duration, number, , , How long the connection lasted.  For 3-way or 4-way connection tear-downs - this will not include the final ACK.
conn_red, orig_bytes, integer, network_sent_bytes, uinteger, The number of payload bytes the originator sent. For TCP this is taken from sequence numbers and might be inaccurate (e.g. due to large connections).
conn_red, resp_bytes, integer, network_received_bytes, uinteger, The number of payload bytes the responder sent. See *orig_bytes*.
conn_red, conn_state, string, metadata_description, , The state of the connection.
conn_red, local_orig, boolean, , , If the connection is originated locally - this value will be T. If it was originated remotely it will be F.  In the case that the `Site::local_nets` variable is undefined - this field will be left empty at all times.
conn_red, local_resp, boolean, , , If the connection is responded to locally - this value will be T. If it was responded to remotely it will be F.  In the case that the `Site::local_nets` variable is undefined - this field will be left empty at all times.
conn_red, missed_bytes, integer, , , Indicates the number of bytes missed in content gaps - which is representative of packet loss.  A value other than zero will normally cause protocol analysis to fail but some analysis may have been completed prior to the packet loss.
conn_red, history, string, , , Records the state history of connections as a string of letters.  The meaning of those letters is:
conn_red, orig_pkts, integer, , , Number of packets that the originator sent. Only set if `use_conn_size_analyzer` = T.
conn_red, orig_ip_bytes, integer, , , Number of IP level bytes that the originator sent (as seen on the wire - taken from the IP total_length header field). Only set if `use_conn_size_analyzer` = T.
conn_red, resp_pkts, integer, , , Number of packets that the responder sent. Only set if `use_conn_size_analyzer` = T.
conn_red, resp_ip_bytes, integer, , , Number of IP level bytes that the responder sent (as seen on the wire - taken from the IP total_length header field). Only set if `use_conn_size_analyzer` = T.
conn_red, tunnel_parents, array[string], , , If this connection was over a tunnel - indicate the *uid* values for any encapsulating parent connections used over the lifetime of this inner connection.
conn_red, orig_cc, string, , , The name of the node where this connection was analyzed. Country code for GeoIP lookup of the originating IP address.
conn_red, resp_cc, string, , , Country code for GeoIP lookup of the responding IP address.
conn_red, suri_ids, array[string], , , The suri_ids information.
conn_red, spcap.url, string, , , The spcap.url information.
conn_red, spcap.rule, integer, , , The spcap.rule information.
conn_red, spcap.trigger, string, , , The spcap.trigger information.
conn_red, app, array[string], , , The app information.
conn_red, corelight_shunted, boolean, , , The corelight_shunted information.
conn_red, orig_shunted_pkts, integer, , , The orig_shunted_pkts information.
conn_red, orig_shunted_bytes, integer, , , The orig_shunted_bytes information.
conn_red, resp_shunted_pkts, integer, , , The resp_shunted_pkts information.
conn_red, resp_shunted_bytes, integer, , , The resp_shunted_bytes information.
conn_red, orig_l2_addr, string, , , Link-layer address of the originator (if available).
conn_red, resp_l2_addr, string, , , Link-layer address of the responder (if available).
conn_red, id_orig_h_n.src, string, , , How we determined the name/address pair. Either ``DNS_A`` representing the DNS_A* family of query types - or ``DNS_PTR`` for reverse DNS lookups.
conn_red, id_orig_h_n.vals, array[string], , , The set of names we observed for a given address.
conn_red, id_resp_h_n.src, string, , , How we determined the name/address pair. Either ``DNS_A`` representing the DNS_A* family of query types - or ``DNS_PTR`` for reverse DNS lookups.
conn_red, id_resp_h_n.vals, array[string], , , The set of names we observed for a given address.
conn_red, vlan, integer, , , The outer VLAN for this connection (if applicable).
conn_red, inner_vlan, integer, , , The inner VLAN for this connection (if applicable).
conn_red, community_id, string, event1.idm.read_only_udm.network.community_id, , The community_id information.

conn_long, , , metadata_event_type, , replace with 'NETWORK_CONNECTION'
conn_long, , , metadata_product_name, , replace with 'Zeek'
conn_long, ts, time, , , This is the time of the first packet.
conn_long, uid, string, metadata_product_log_id, , A unique identifier of the connection.
conn_long, id.orig_h, string, principal_ip, , The originator's IP address.
conn_long, id.orig_p, integer, principal_port, , The originator's port number.
conn_long, id.resp_h, string, target_ip, , The responder's IP address.
conn_long, id.resp_p, integer, target_port, , The responder's port number.
conn_long, proto, string, network_ip_protocol, , The transport layer protocol of the connection.
conn_long, service, string, network_application_protocol, , An identification of an application protocol being sent over the connection.
conn_long, duration, number, , , How long the connection lasted.  For 3-way or 4-way connection tear-downs - this will not include the final ACK.
conn_long, orig_bytes, integer, network_sent_bytes, uinteger, The number of payload bytes the originator sent. For TCP this is taken from sequence numbers and might be inaccurate (e.g. due to large connections).
conn_long, resp_bytes, integer, network_received_bytes, uinteger, The number of payload bytes the responder sent. See *orig_bytes*.
conn_long, conn_state, string, metadata_description, , The state of the connection.
conn_long, local_orig, boolean, , , If the connection is originated locally - this value will be T. If it was originated remotely it will be F.  In the case that the `Site::local_nets` variable is undefined - this field will be left empty at all times.
conn_long, local_resp, boolean, , , If the connection is responded to locally - this value will be T. If it was responded to remotely it will be F.  In the case that the `Site::local_nets` variable is undefined - this field will be left empty at all times.
conn_long, missed_bytes, integer, , , Indicates the number of bytes missed in content gaps - which is representative of packet loss.  A value other than zero will normally cause protocol analysis to fail but some analysis may have been completed prior to the packet loss.
conn_long, history, string, , , Records the state history of connections as a string of letters.  The meaning of those letters is:
conn_long, orig_pkts, integer, , , Number of packets that the originator sent. Only set if `use_conn_size_analyzer` = T.
conn_long, orig_ip_bytes, integer, , , Number of IP level bytes that the originator sent (as seen on the wire - taken from the IP total_length header field). Only set if `use_conn_size_analyzer` = T.
conn_long, resp_pkts, integer, , , Number of packets that the responder sent. Only set if `use_conn_size_analyzer` = T.
conn_long, resp_ip_bytes, integer, , , Number of IP level bytes that the responder sent (as seen on the wire - taken from the IP total_length header field). Only set if `use_conn_size_analyzer` = T.
conn_long, tunnel_parents, array[string], , , If this connection was over a tunnel - indicate the *uid* values for any encapsulating parent connections used over the lifetime of this inner connection.
conn_long, orig_cc, string, , , The name of the node where this connection was analyzed. Country code for GeoIP lookup of the originating IP address.
conn_long, resp_cc, string, , , Country code for GeoIP lookup of the responding IP address.
conn_long, suri_ids, array[string], , , The suri_ids information.
conn_long, spcap.url, string, , , The spcap.url information.
conn_long, spcap.rule, integer, , , The spcap.rule information.
conn_long, spcap.trigger, string, , , The spcap.trigger information.
conn_long, app, array[string], , , The app information.
conn_long, corelight_shunted, boolean, , , The corelight_shunted information.
conn_long, orig_shunted_pkts, integer, , , The orig_shunted_pkts information.
conn_long, orig_shunted_bytes, integer, , , The orig_shunted_bytes information.
conn_long, resp_shunted_pkts, integer, , , The resp_shunted_pkts information.
conn_long, resp_shunted_bytes, integer, , , The resp_shunted_bytes information.
conn_long, orig_l2_addr, string, , , Link-layer address of the originator (if available).
conn_long, resp_l2_addr, string, , , Link-layer address of the responder (if available).
conn_long, id_orig_h_n.src, string, , , How we determined the name/address pair. Either ``DNS_A`` representing the DNS_A* family of query types - or ``DNS_PTR`` for reverse DNS lookups.
conn_long, id_orig_h_n.vals, array[string], , , The set of names we observed for a given address.
conn_long, id_resp_h_n.src, string, , , How we determined the name/address pair. Either ``DNS_A`` representing the DNS_A* family of query types - or ``DNS_PTR`` for reverse DNS lookups.
conn_long, id_resp_h_n.vals, array[string], , , The set of names we observed for a given address.
conn_long, vlan, integer, , , The outer VLAN for this connection (if applicable).
conn_long, inner_vlan, integer, , , The inner VLAN for this connection (if applicable).
conn_long, community_id, string, event1.idm.read_only_udm.network.community_id, , The community_id information.

dns, , , metadata_event_type, , replace with 'NETWORK_DNS'
dns, , , metadata_product_name, , replace with 'Zeek'
dns, ts, time, date, , The earliest time at which a DNS protocol message over the associated connection is observed.
dns, uid, string, metadata_product_log_id, , A unique identifier of the connection over which DNS messages are being transferred.
dns, id.orig_h, string, principal_ip, , The originator's IP address.
dns, id.orig_p, string, principal_port, string, The originator's port number.
dns, id.resp_h, string, target_ip, , The responder's IP address.
dns, id.resp_p, string, target_port, string, The responder's port number.
dns, proto, string, network_ip_protocol, , The transport layer protocol of the connection.
dns, trans_id, integer, , , A 16-bit identifier assigned by the program that generated the DNS query.  Also used in responses to match up replies to outstanding queries.
dns, rtt, number, , , Round trip time for the query and response. This indicates the delay between when the request was seen until the answer started.
dns, query, string, dns_question.name, , The domain name that is the subject of the DNS query.
dns, qclass, integer, dns_question.class, uinteger, The QCLASS value specifying the class of the query.
dns, qclass_name, string, metadata_description, , A descriptive name for the class of the query.
dns, qtype, integer, dns_question.type, uinteger, A QTYPE value specifying the type of the query.
dns, qtype_name, string, , , A descriptive name for the type of the query.
dns, rcode, integer, network_dns_response_code, uinteger, The response code value in DNS response messages.
dns, rcode_name, string, , , A descriptive name for the response code value.
dns, AA, boolean, dns.authoritative, , The Authoritative Answer bit for response messages specifies that the responding name server is an authority for the domain name in the question section.
dns, TC, boolean, dns.truncated, , The Truncation bit specifies that the message was truncated.
dns, RD, boolean, dns.recursion_desired, , The Recursion Desired bit in a request message indicates that the client wants recursive service for this query.
dns, RA, boolean, dns.recursion_available, , The Recursion Available bit in a response message indicates that the name server supports recursive queries.
dns, Z, integer, , , A reserved field that is usually zero in queries and responses.
dns, answers, array[string], dns_answer.name, vector of string, The set of resource descriptions in the query answer.
dns, TTLs, array[number], , vector of interval, The caching intervals of the associated RRs described by the *answers* field.
dns, rejected, boolean, , , The DNS query was rejected by the server.
dns, is_trusted_domain, string, , , The is_trusted_domain information.
dns, icann_host_subdomain, string, , , The icann_host_subdomain information.
dns, icann_domain, string, event1.idm.read_only_udm.network.dns_domain, , The icann_domain information.
dns, icann_tld, string, , , The icann_tld information.

dns_red, , , metadata_event_type, , replace with 'NETWORK_DNS'
dns_red, , , metadata_product_name, , replace with 'Zeek'
dns_red, ts, time, date, , The earliest time at which a DNS protocol message over the associated connection is observed.
dns_red, uid, string, metadata_product_log_id, , A unique identifier of the connection over which DNS messages are being transferred.
dns_red, id.orig_h, string, principal_ip, , The originator's IP address.
dns_red, id.orig_p, string, principal_port, string, The originator's port number.
dns_red, id.resp_h, string, target_ip, , The responder's IP address.
dns_red, id.resp_p, string, target_port, string, The responder's port number.
dns_red, query, string, dns_question.name, , The domain name that is the subject of the DNS query.
dns_red, qtype_name, string, , , A descriptive name for the type of the query.
dns_red, rcode, integer, network_dns_response_code, uinteger, The response code value in DNS response messages.
dns_red, answers, array[string], dns_answer.name, vector of string, The set of resource descriptions in the query answer.
dns_red, num, integer, , , How often we've seen this query in this coalescence interval.

files, , , metadata_event_type, , replace with 'FILE_UNCATEGORIZED'
files, , , metadata_product_name, , replace with 'Zeek'
files, , , principal_ip, , replace with '%{tx_hosts.0}'
files, , , principal_hostname, , replace with '%{tx_hosts.0}'
files, , , target_ip, , replace with '%{rx_hosts.0}'
files, ts, time, , , The time when the file was first seen.
files, fuid, string, metadata_product_log_id, , An identifier associated with a single file.
files, tx_hosts, array[string], , , If this file was transferred over a network connection this should show the host or hosts that the data sourced from.
files, rx_hosts, array[string], , , If this file was transferred over a network connection this should show the host or hosts that the data traveled to.
files, conn_uids, array[string], , , Connection UIDs over which the file was transferred.
files, source, string, , , An identification of the source of the file data.  E.g. it may be a network protocol over which it was transferred or a local file path which was read or some other input source.
files, depth, integer, , , A value to represent the depth of this file in relation to its source.  In SMTP it is the depth of the MIME attachment on the message.  In HTTP it is the depth of the request within the TCP connection.
files, analyzers, array[string], , , A set of analysis types done during the file analysis.
files, mime_type, string, target_file_mime_type, , A mime type provided by the strongest file magic signature match against the *bof_buffer* field of `fa_file` or in the cases where no buffering of the beginning of file occurs an initial guess of the mime type based on the first data seen.
files, filename, string, target_file_full_path, , A filename for the file if one is available from the source for the file.  These will frequently come from 'Content-Disposition' headers in network protocols.
files, duration, number - interval, , , The duration the file was analyzed for.
files, local_orig, boolean - bool, , , If the source of this file is a network connection this field indicates if the data originated from the local network or not as determined by the configured `Site::local_nets`.
files, is_orig, boolean - bool, , , If the source of this file is a network connection this field indicates if the file is being sent by the originator of the connection or the responder.
files, seen_bytes, integer - count, target_file_size, , Number of bytes provided to the file analysis engine for the file.
files, total_bytes, integer - count, , , Total number of bytes that are supposed to comprise the full file.
files, missing_bytes, integer - count, , , The number of bytes in the file stream that were completely missed during the process of analysis e.g. due to dropped packets.
files, overflow_bytes, integer - count, , , The number of bytes in the file stream that were not delivered to stream file analyzers.  This could be overlapping bytes or bytes that couldn't be reassembled.
files, timedout, boolean - bool, , , Whether the file analysis timed out at least once for the file.
files, parent_fuid, string, , , Identifier associated with a container file from which this one was extracted as part of the file analysis.
files, md5, string, target_file_md5, , An MD5 digest of the file contents.
files, sha1, string, target_file_sha1, , A SHA1 digest of the file contents.
files, sha256, string, target_file_sha256, , A SHA256 digest of the file contents.
files, extracted, string, about.file.full_path, , Local filename of extracted file.
files, extracted_cutoff, boolean - bool, , , Set to true if the file being extracted was cut off so the whole file was not logged.
files, extracted_size, integer - count, , , The number of bytes extracted to disk.

files_red, , , metadata_event_type, , replace with 'FILE_UNCATEGORIZED'
files_red, , , metadata_product_name, , replace with 'Zeek'
files_red, , , principal_ip, , replace with '%{tx_hosts.0}'
files_red, , , principal_hostname, , replace with '%{tx_hosts.0}'
files_red, , , target_ip, , replace with '%{rx_hosts.0}'
files_red, ts, time, , , The time when the file was first seen.
files_red, fuid, string, metadata_product_log_id, , An identifier associated with a single file.
files_red, tx_hosts, array[string], , , If this file was transferred over a network connection this should show the host or hosts that the data sourced from.
files_red, rx_hosts, array[string], , , If this file was transferred over a network connection this should show the host or hosts that the data traveled to.
files_red, conn_uids, array[string], , , Connection UIDs over which the file was transferred.
files_red, source, string, , , An identification of the source of the file data.  E.g. it may be a network protocol over which it was transferred or a local file path which was read or some other input source.
files_red, depth, integer, , , A value to represent the depth of this file in relation to its source.  In SMTP it is the depth of the MIME attachment on the message.  In HTTP it is the depth of the request within the TCP connection.
files_red, analyzers, array[string], , , A set of analysis types done during the file analysis.
files_red, mime_type, string, target_file_mime_type, , A mime type provided by the strongest file magic signature match against the *bof_buffer* field of `fa_file` or in the cases where no buffering of the beginning of file occurs an initial guess of the mime type based on the first data seen.
files_red, filename, string, target_file_full_path, , A filename for the file if one is available from the source for the file.  These will frequently come from 'Content-Disposition' headers in network protocols.
files_red, local_orig, boolean - bool, , , If the source of this file is a network connection this field indicates if the data originated from the local network or not as determined by the configured `Site::local_nets`.
files_red, is_orig, boolean - bool, , , If the source of this file is a network connection this field indicates if the file is being sent by the originator of the connection or the responder.
files_red, seen_bytes, integer - count, target_file_size, , Number of bytes provided to the file analysis engine for the file.
files_red, total_bytes, integer - count, , , Total number of bytes that are supposed to comprise the full file.
files_red, missing_bytes, integer - count, , , The number of bytes in the file stream that were completely missed during the process of analysis e.g. due to dropped packets.
files_red, overflow_bytes, integer - count, , , The number of bytes in the file stream that were not delivered to stream file analyzers.  This could be overlapping bytes or bytes that couldn't be reassembled.
files_red, timedout, boolean - bool, , , Whether the file analysis timed out at least once for the file.
files_red, parent_fuid, string, , , Identifier associated with a container file from which this one was extracted as part of the file analysis.
files_red, md5, string, target_file_md5, , An MD5 digest of the file contents.
files_red, sha1, string, target_file_sha1, , A SHA1 digest of the file contents.
files_red, sha256, string, target_file_sha256, , A SHA256 digest of the file contents.
files_red, extracted, string, about.file.full_path, , Local filename of extracted file.
files_red, extracted_cutoff, boolean - bool, , , Set to true if the file being extracted was cut off so the whole file was not logged.
files_red, extracted_size, integer - count, , , The number of bytes extracted to disk.
files_red, num, integer - count, , , Number of times we've seen this file.

intel, , , metadata_event_type, , replace with 'SCAN_NETWORK'
intel, , , metadata_product_name, , replace with 'Zeek'
intel, ts, time, date, , The earliest time at which a DNS protocol message over the associated connection is observed.
intel, uid, string, metadata_product_log_id, , A unique identifier of the connection over which DNS messages are being transferred.
intel, id.orig_h, string, principal_ip, , The originator's IP address.
intel, id.orig_p, string, principal_port, string, The originator's port number.
intel, id.resp_h, string, target_ip, , The responder's IP address.
intel, id.resp_p, string, target_port, string, The responder's port number.
intel, seen.indicator, string, , , The string if the data is about a string.
intel, seen.indicator_type, string, , , The type of data that the indicator represents.
intel, seen.where, string, , , Where the data was discovered.
intel, matched, array[string], , , Which indicator types matched.
intel, sources, array[string], , , Sources which supplied data that resulted in this match.
intel, fuid, string, , , If a file was associated with this intelligence hit - this is the uid for the file.
intel, file_mime_type, string, , , A mime type if the intelligence hit is related to a file. If the $f field is provided this will be automatically filled out.
intel, file_desc, string, , , Frequently files can be 'described' to give a bit more context. If the $f field is provided this field will be automatically filled out.
intel, desc, array[string], , , The desc information.
intel, url, array[string], , , The url information.
intel, confidence, array[number], , , The confidence information.
intel, firstseen, array[string], , , The firstseen information.
intel, lastseen, array[string], , , The lastseen information.
intel, associated, array[string], , , The associated information.
intel, category, array[string], , , The category information.
intel, campaigns, array[string], , , The campaigns information.
intel, reports, array[string], , , The reports information.

notice, , , metadata_event_type, , replace with 'STATUS_UPDATE'
notice, , , metadata_product_name, , replace with 'Zeek'
notice, ts, time, date, , The earliest time at which a DNS protocol message over the associated connection is observed.
notice, uid, string, metadata_product_log_id, , A unique identifier of the connection over which DNS messages are being transferred.
notice, id.orig_h, string, principal_ip, , The originator's IP address.
notice, id.orig_p, string, principal_port, string, The originator's port number.
notice, id.resp_h, string, target_ip, , The responder's IP address.
notice, id.resp_p, string, target_port, string, The responder's port number.
notice, fuid,  string, ,  , A file unique ID if this notice is related to a file.  If the *f* field is provided - this will be automatically filled out.
notice, file_mime_type,  string, ,  , A mime type if the notice is related to a file.  If the *f* field is provided - this will be automatically filled out.
notice, file_desc,  string, ,  , Frequently files can be 'described' to give a bit more context.  This field will typically be automatically filled out from an fa_file record.  For example - if a notice was related to a file over HTTP - the URL of the request would be shown.
notice, proto,  string, ,  , The transport protocol. Filled automatically when either *conn* - *iconn* or *p* is specified.
notice, note,  string, metadata_description,  , The `Notice::Type` of the notice.
notice, note,  string, security_result.description,  , The `Notice::Type` of the notice.
notice, msg,  string, ,  , The human readable message for the notice.
notice, sub,  string, ,  , The human readable sub-message.
notice, src,  string, ,  , Source address - if we don't have a `conn_id`.
notice, dst,  string, ,  , Destination address.
notice, p,  integer, ,  , Associated port - if we don't have a `conn_id`.
notice, n,  integer, ,  , Associated count - or perhaps a status code.
notice, peer_descr,  string, ,  , Textual description for the peer that raised this notice - including name host address and port.
notice, actions,  array[string], ,  , The actions which have been applied to this notice.
notice, suppress_for,  number, ,  , This field indicates the length of time that this unique notice should be suppressed.
notice, remote_location.country_code,  string, ,  , The country code.
notice, remote_location.region,  string, ,  , The region.
notice, remote_location.city,  string, ,  , The city.
notice, remote_location.latitude,  number, ,  , Latitude.
notice, remote_location.longitude,  number, ,  , Longitude.

suricata_corelight, , , metadata_event_type, , replace with 'SCAN_NETWORK'
suricata_corelight, , , metadata_product_name, , replace with 'Suricata'
suricata_corelight, ts, time, date, , The earliest time at which a DNS protocol message over the associated connection is observed.
suricata_corelight, uid, string, metadata_product_log_id, , A unique identifier of the connection over which DNS messages are being transferred.
suricata_corelight, id.orig_h, string, principal_ip, , The originator's IP address.
suricata_corelight, id.orig_p, string, principal_port, string, The originator's port number.
suricata_corelight, id.resp_h, string, target_ip, , The responder's IP address.
suricata_corelight, id.resp_p, string, target_port, string, The responder's port number.
suricata_corelight, id.vlan, integer, , , The id.vlan information.
suricata_corelight, id.vlan_inner, integer, , , The id.vlan_inner information.
suricata_corelight, icmp_type, integer, , , The icmp type if this was ICMP.
suricata_corelight, icmp_code, integer, , , The icmp code if this was ICMP.
suricata_corelight, suri_id, string, , , The Suricata log id.
suricata_corelight, service, string, , , The service name (e.g. - http)
suricata_corelight, flow_id, integer, , , The flow id
suricata_corelight, tx_id, integer, , , The transaction id
suricata_corelight, pcap_cnt, integer, , , The pcap record count
suricata_corelight, alert.action, string, , , The alert.action information.
suricata_corelight, alert.gid, integer, , , The alert.gid information.
suricata_corelight, alert.signature_id, integer, security_result.rule_id, string, The alert.signature_id information.
suricata_corelight, alert.rev, integer, , , The alert.rev information.
suricata_corelight, alert.signature, string, metadata_product_event_type, , The alert.signature information.
suricata_corelight, alert.signature, string, security_result.summary, , The alert.signature information.
suricata_corelight, alert.signature, string, security_result.threat_name, , The alert.signature information.
suricata_corelight, alert.category, string, sr_category, , The alert.category information.
suricata_corelight, alert.severity, integer, security_result.severity_details, string, The alert.severity information.
suricata_corelight, alert.metadata, array[string], , , The alert.metadata information.
suricata_corelight, community_id, string, , , The community id
suricata_corelight, payload, string, , , The payload
suricata_corelight, packet, string, , , The packet
suricata_corelight, metadata, array[string], , , Alert metadata (if any)
